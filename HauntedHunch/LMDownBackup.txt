
        /// <summary>
        /// Activated when clicked on a square.
        /// Does different things depending on the input and the state of the variables table, turn, cur and interactor.
        /// </summary>
        /// <param name="sen"> Sqaure that is just clicked </param>
        public void Action(Square sen)
        {
            if (gameEnded) return;

            // If we are at an in-between move of an ability with interactor
            if (interacter != null)
            {
                if (sen.State == SquareState.AbilityWithInteracterable)
                {
                    cur.Piece.AbilityWithInteracterStageTwo(table, interacter, sen, ref turn);
                    UpdateHistory();
                    UpdatePits();
                }
                interacter = null;
                cur = null;
                return;
            }

            tunnel1: // Used when selecting a friendly piece to move while already had been selected a friendly piece to move

            if (cur == null) // If no piece is chosen yet
            {
                // If a valid piece is chosen, paint the possible moves for preview.
                if (sen.Piece != null && (!turnConstraintsEnabled ||
                    sen.Piece.Player == PlayerType.White && (turn % 4 == 0 || turn % 4 == 3) || sen.Piece.Player == PlayerType.Black && (turn % 4 == 1 || turn % 4 == 2)))
                {
                    sen.Piece.PossibleMoves(table, turn);
                    cur = sen;
                }
                // If a non-valid square is chosen, do nothing
                else
                {
                    // Explicitly kick other (cur == null) cases, don't merge 2 if statements.
                }
            }
            else // (cur != null)
            {
                // Ability Uno
                if (sen.State == SquareState.AbilityUnoable)
                {
                    cur.Piece.AbilityUno(table, ref turn);
                    UpdateHistory();

                    UpdatePits();
                    cur = null;
                }

                // Ability With Interacter
                else if (sen.State == SquareState.AbilityWithInteracterable)
                {
                    interacter = cur.Piece.AbilityWithInteracterStageOne(table, sen);

                    // If the piece is hiddenly frozen, abilty with interacter stage one returns null. Then cur should also be null.
                    if (interacter == null)
                        cur = null;

                    // Dont check for gameEnded
                    return;
                }

                // None Move
                else if (sen.State == SquareState.Moveable && cur != sen)
                {
                    cur.Piece.Move(table, sen.Row, sen.Column, ref turn);
                    UpdateHistory();

                    UpdatePits();
                    cur = null;
                }

                // If another friendly piece is chosen
                else if (cur != sen && sen.Piece != null && cur.Piece.Player == sen.Piece.Player)
                {
                    cur = null;
                    Repaint();
                    goto tunnel1; // Behave as if the cur was null and go back to the top of the LMDown method
                }

                // Unvalid square chosen
                else
                {
                    cur = null;
                    Repaint();
                }
            }

            // Update gameEnded
            bool whiteLotusIsOnBoard = false;
            bool blackLotusIsOnBoard = false;
            for (int i = 1; i <= nr; i++)
                for (int j = 1; j <= nc; j++)
                {
                    if (table[i, j].Piece == null || !(table[i, j].Piece is Lotus)) continue;

                    // If either lotus is on the board
                    if (table[i, j].Piece.Player == PlayerType.White)
                        whiteLotusIsOnBoard = true;
                    else
                        blackLotusIsOnBoard = true;

                    // If a lotus reaches the last row for either player, game ends.
                    if (table[i, j].Piece.Player == PlayerType.White && i == nr || table[i, j].Piece.Player == PlayerType.Black && i == 1)
                        gameEnded = true;
                }
            // If any lotus is removed, game ends.
            if (!whiteLotusIsOnBoard || !blackLotusIsOnBoard)
                gameEnded = true;
        }